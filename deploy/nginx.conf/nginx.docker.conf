# Running in production mode

# Default server block to catch undefined server names
server {
    listen 80 default_server;
    server_name _;
    return 444;
}

# HTTP -> HTTPS redirect for auroville.social
server {
    listen 80;
    server_name auroville.social;
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main HTTPS server for auroville.social
server {
    listen 443 ssl http2;
    server_name auroville.social;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/auroville.social/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/auroville.social/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/auroville.social/chain.pem;

    # SSL configuration
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (uncomment if you're sure)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # Serve static files
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.auroville.social;" always;
    }

    # Handle JavaScript modules
    location ~* \.m?js$ {
        root /usr/share/nginx/html;
        types { application/javascript js mjs; }
        add_header X-Content-Type-Options nosniff;
    }

    # Handle TypeScript modules
    location ~* \.tsx?$ {
        root /usr/share/nginx/html;
        types { application/javascript ts tsx; }
        add_header X-Content-Type-Options nosniff;
    }

    # Service worker with correct MIME type
    location = /service-worker.js {
        root /usr/share/nginx/html;
        types { application/javascript js; }
        add_header Cache-Control "no-cache";
        add_header Service-Worker-Allowed "/";
    }

    # Proxy API requests
    location /api/ {
        proxy_pass http://app:5000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 90;
        proxy_redirect off;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' 'https://auroville.social' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
    }

    # Optimize file serving
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|woff2)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
